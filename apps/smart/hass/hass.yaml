apiVersion: apps/v1
kind: Deployment
metadata:
  name: hass
  namespace: hass
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: hass
  template:
    metadata:
      name: hass
      labels:
        app: hass
        app.kubernetes.io/name: hass
      annotations:
        k8s.v1.cni.cncf.io/networks: '[
            {
              "name" : "lan-network",
              "namespace": "default",
              "mac": "16:3c:13:e1:c9:02",
              "ips": ["192.168.31.253/24"]
            }
          ]'
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        sysctls:
          - name: net.ipv4.ip_unprivileged_port_start
            value: "80"
      volumes:
        - name: hass-nfs
          persistentVolumeClaim:
            claimName: hass-nfs
      containers:
        - name: hass
          image: docker.io/homeassistant/home-assistant:2024.9.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            privileged: false
            runAsUser: 1000
            runAsGroup: 1000
          ports:
            - containerPort: 80
          volumeMounts:
            - name: hass-nfs
              mountPath: /config
              subPath: "config/"
          env:
            - name: "PUID"
              value: "1000"
            - name: "PGID"
              value: "1000"
            - name: TZ
              value: "Europe/Zurich"
---
apiVersion: v1
kind: Service
metadata:
  name: hass
  namespace: hass
spec:
  selector:
    app: hass
  ports:
    - port: 80
      targetPort: 80
  type: LoadBalancer
  loadBalancerIP: 192.168.31.233
  sessionAffinity: ClientIP
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: hass
  namespace: hass
  annotations:
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: "Host(`hass.umhomelab.com`) || Host(`www.hass.umhomelab.com`)"
      kind: Rule
      middlewares:
        - name: authentik
          namespace: auth
      services:
        - name: hass
          namespace: hass
          port: 80
  tls: {}